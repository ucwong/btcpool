#
# kafka repeater cfg
#
# @since 2019-07
# @copyright btc.com
#

kafka = {
    in_brokers = "127.0.0.1:9092";
    in_topic = "BtcShare";
    # Used to record progress / offsets.
    # Change it to reset the progress (will forward from the beginning).
    # The two repeater cannot have the same group id, otherwise the result is undefined.
    in_group_id = "btc_forward_1";

    out_brokers = "127.0.0.1:9092";
    out_topic = "Share";

    # authorize settings (only for out_brokers)
    #
    # To generate a key and a self-signed certificate, run:
    # openssl genrsa -out client.key 2048
    # openssl req -new -key client.key -out client.crt.req
    # openssl x509 -req -days 365 -in client.crt.req -signkey client.key -out client.crt
    # cp client.crt ca.crt
    # 
    security = {
        # plaintext, sasl_plaintext, ssl, sasl_ssl
        protocol = "plaintext";
    };
    ssl = {
        ca = {
            location = "ca.crt";
        };
        # Can be omitted if client verification is not performed
        certificate = {
            location = "client.crt";
        };
        # Can be omitted if client verification is not performed
        key = {
            location = "client.key";
            password = "";
        };
    };
    # Can be omitted if SASL authorization is not performed
    sasl = {
        username = "test";
        password = "123";
    };
};

### 
# Choose a message converter you want to use. Set it to true to enable it.
# If no converter is enabled, kafka messages will be forwarded without any conversion.
# Currently, only one converter can be enabled at a time.
# TODO: Support for multiple converters (converter chain).
###

# Convert the Share version
# TODO: add bitcoin_v1_to_v2
share_convertor = {
    bitcoin_v2_to_v1 = false;
};

# Change the difficulty of shares according to stratum jobs from a topic.
# TODO: add bitcoin_v2
share_diff_changer = {
    job_brokers = "127.0.0.1:9092";
    job_topic = "StratumJob";
    job_group_id = "btc_share_diffch_v1_01";

    bitcoin_v1 = false;
    bitcoin_v2_to_v1 = false;

    # The program uses a deterministic difficulty copy logic.
    # This means that no matter when you run the program, the result is the same.
    # 
    # However, if you use the program to copy instant-generated shares, you will meet a problem:
    # Shares in a time period will be modified and forwarded only after got the stratum job within this period of time,
    # so current shares will always be stacked until a new job got later.
    # 
    # Setting a fixed time offset will make the current job available for the current and subsequent shares,
    # then shares will no longer be stacked.
    # When the time reaches the end of the offset, usually a new stratum job is ready.
    # So the copying process will become continuous rather than "pulsed".
    #
    # Since the difficulty changing of bitcoin (including BCH) is not very fast,
    # setting a time offset within 1 minute will not have a significant effect on users' earning.
    job_time_offset = 30;
};

# Print shares only, no forwarding
share_printer = {
    bitcoin_v1 = false;
};

# Print kafka messages, no forwarding
message_printer = {
    print_hex = false;
};

# Logging options
log = {
    repeated_number_display_interval = 10; # seconds
};
