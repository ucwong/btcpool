#
# job maker cfg
#
# @since 2016-06
# @copyright btc.com
#

job_workers = (
  {
    chain_type = "BTC";
    testnet = false;
    enabled = true;

    rawgbt_topic = "BtcRawGbt";
    auxpow_gw_topic = "AuxRawGw"; // kafka topic of merge mining auxpow work
    rsk_rawgw_topic = "RskRawGw"; // kafka topic of RSK merge mining
    vcash_rawgw_topic = "VcashRawGw"; // kafka topic of VCash merge mining
    job_topic = "BtcJob";

    id = 1;

    job_interval = 20; // send stratum job interval (seconds)
    max_job_delay = 20; // max job dealy (seconds)

    # max gbt life cycle time seconds
    gbt_life_time = 90;

    # max empty gbt life cycle time seconds
    # CAUTION: the value SHOULD >= 10. If non-empty job not come in 10 seconds, 
    #          jobmaker will always make a previous height job until its arrival 
    empty_gbt_life_time = 15;

    # policy used to determine the pace of merge mining jobs to be sent.
    # 0: merge mining `getwork` does not trigger job updates.
    # 1: update job when the `notify` flag in RSK `getwork` is true or the block height in Namecoin/VCash `getwork` higher than before.
    # 2: update job when the current block hash of a merge mining `getwork` is different from before.
    aux_merged_mining_notify = 1; # (1 is recommended and default)
    rsk_merged_mining_notify = 1; # (1 is recommended and default)
    vcash_merged_mining_notify = 1; # (1 is recommended and default)

    zookeeper_lock_path = "/locks/jobmaker_btc";
    file_last_job_time = "./btc_lastjobtime.txt";

    # block version, default is 0 means use the version which returned by bitcoind
    # or you can specify the version you want to signal.
    # more info: https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki
    # Example: 
    #                      0 : use bitcoind block version (recommented)
    #  536870912(0x20000000) : bip9 support (with empty version bits)
    #  536870914(0x20000002) : bip141(segwit), bit 1
    #  536870928(0x20000010) : bip91, bit 4
    #  536870930(0x20000012) : bip141 & bip91, both bit 1 & 4
    #
    #  block_version = 0;
    #  block_version = 536870912;
    #  ...
    # 
    block_version = 0;

    # payout address
    # the private key of my2dxGb5jz43ktwGxg2doUaEb9WhZ9PQ7K is cQAiutBRMq4wwC9JHeANQLttogZ2EXw9AgnGXMq5S3SAMmbX2oLd
    payout_address = "my2dxGb5jz43ktwGxg2doUaEb9WhZ9PQ7K";

    # coinbase info with location ID (https://github.com/btccom/btcpool/issues/36)
    coinbase_info = "region1/Project BTCPool/";

    # Share jobs with the main pool, but with different coinbase information and addresses.
    subpool = {
      enabled = false; # default: false
      pools = (
        {
          name = "pool2";
          coinbase_info = "region1/Pool2/";
          payout_address = "2N87LbvMZi6sECrLdNBhKAPY5QB4HVjkenU";

          # Optional, update coinbase_info and payout_address via zookeeper.
          #zk_update_path = "/jobmaker/subpool/pool2/btc";
        },
        {
          name = "pool3";
          coinbase_info = "region1/Pool3/";
          payout_address = "mrootSVwURPkHr2D2pPS8bQWg2pakv6rvR";
        }
      );
      # Optional, set a safe maximum length for coinbase information.
      # Only used when updating coinbase information via zookeeper.
      # Coinbase information that exceed the limit will be truncated.
      coinbase_info_max_len = 30;
    };

    grandPoolEnabled = false; # default: false
});

kafka = {
  brokers = "127.0.0.1:9092"; # "10.0.0.1:9092,10.0.0.2:9092,..."
};

zookeeper = {
  brokers = "127.0.0.1:2181"; # "10.0.0.1:2181,10.0.0.2:2181,..."
  
  # Optional, authentication username and password.
  #auth_user = "user1";
  #auth_passwd = "passwd1";
};
