#
# job maker cfg
#
# @since 2016-06
# @copyright btc.com
#

job_workers = (
  {
    id = 1;
    chain_type = "BTC";
    enabled = true;

    testnet = true; // is using testnet3

    # payout address
    # the private key of my2dxGb5jz43ktwGxg2doUaEb9WhZ9PQ7K is cQAiutBRMq4wwC9JHeANQLttogZ2EXw9AgnGXMq5S3SAMmbX2oLd
    payout_address = "my2dxGb5jz43ktwGxg2doUaEb9WhZ9PQ7K";
    # coinbase info with location ID (https://github.com/btccom/btcpool/issues/36)
    coinbase_info = "region1/Project BTCPool/";

    # block version, default is 0 means use the version which returned by bitcoind
    # or you can specify the version you want to signal.
    # more info: https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki
    # Example: 
    #  0                     : use bitcoind block version,
    #  536870912(0x20000000) : bip9 support (with empty version bits)
    #  536870914(0x20000002) : bip141(segwit), bit 1
    # 
    block_version = 0;

    rawgbt_topic = "BtcRawGbt";

    auxpow_gw_topic = "AuxPowBlock"; // kafka topic of merge mining auxpow work
    rsk_rawgw_topic = "RskRawGw"; // kafka topic of RSK merge mining

    job_topic = "BtcJob";

    job_interval = 20; // send stratum job interval (seconds)
    max_job_delay = 20; // max job dealy (seconds)

    # max non-empty gbt life cycle time (seconds)
    gbt_life_time = 90;

    # max empty gbt life cycle time seconds
    # CAUTION: the value SHOULD >= 10. If non-empty job not come in 10 seconds, 
    #          jobmaker will always make a previous height job until its arrival 
    empty_gbt_life_time = 15;

    # policy used to determine the pace of merge mining jobs to be sent.
    # 0: merge mining `getwork` does not trigger job updates (RSK and Namecoin).
    # 1: update job when the `notify` flag in RSK `getwork` is true or the block height in Namecoin `getwork` higher than before.
    # 2: update job when the current block hash of a merge mining `getwork` is different from before (RSK and Namecoin).
    merged_mining_notify = 1; # (1 is recommended and default)

    zookeeper_lock_path = "/locks/jobmaker_btc";
    file_last_job_time = "/work/btcpool/build/run_jobmaker/btc_lastjobtime.txt";

    grandPoolEnabled = false; # default: false
  },
  {
    id = 1;
    chain_type = "ETH";
    chain_name = "FOUNDATION"; // CLASSIC (ETC Main Network) or FOUNDATION (ETH Main Network)
    enabled = true;

    rawgw_topic = "EthRawGw";
    job_topic = "EthJob";

    job_interval = 20; // send stratum job interval (seconds)
    max_job_delay = 20; // max job dealy (seconds)
    work_life_time = 60; // max getWork life cycle time (seconds)

    zookeeper_lock_path = "/locks/jobmaker_eth";
    file_last_job_time = "/work/btcpool/build/run_jobmaker/eth_lastjobtime.txt";
  },
  {
    id = 1;
    chain_type = "BTM";
    enabled = true;

    rawgw_topic = "BytomRawGw";
    job_topic = "BytomJob";

    job_interval = 20; // send stratum job interval (seconds)
    max_job_delay = 20; // max job dealy (seconds)
    work_life_time = 90; // max getWork life cycle time (seconds)

    zookeeper_lock_path = "/locks/jobmaker_bytom";
    file_last_job_time = "/work/btcpool/build/run_jobmaker/bytom_lastjobtime.txt";
  },
  {
    id = 1;
    chain_type = "SIA";
    enabled = true;

    rawgw_topic = "SiaRawGw";
    job_topic = "SiaJob";

    job_interval = 30; // send stratum job interval (seconds)
    max_job_delay = 60; // max job dealy (seconds)
    work_life_time = 90; // max getWork life cycle time (seconds)

    zookeeper_lock_path = "/locks/jobmaker_sia";
    file_last_job_time = "/work/btcpool/build/run_jobmaker/sia_lastjobtime.txt";
  }
);

kafka = {
  brokers = "127.0.0.1:9092"; # "10.0.0.1:9092,10.0.0.2:9092,..."
};

zookeeper = {
  brokers = "127.0.0.1:2181"; # "10.0.0.1:2181,10.0.0.2:2181,..."
};
